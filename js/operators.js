'use strict';

// Записать в коротком виде (ошибка в условии вынесена за результат)
let a, b, c, d, k, l, m;
a += 5;
b *= 15;
c -= 3;
d %= 2;
k += a;
l *= b;
m *= 3 * k;

// Возвести переменную в куб, используя краткую запись.
let p;
p **= 3;

// Чему равен y в каждом из примеров, объясните почему:

let y = 0 || 'строка';
y = 'строка';
/*  логический оператор ИЛИ находит первое истинное значение
и возвращает его без преобразования,
0 это false в булевом представлении */

// let y = 1 && 'строка';
// y = 'строка';
/* логический оператор И находит первое ложное значение,
а поскольку не нашел, возвращает последнее*/

// let y = null || 1;
// y = 1;  
/*null преобразуется в 0, 
а 0 это false в булевом представлении*/

// let y = null && 1;
// y = null;
/*  null преобразуется в 0, а 0 это false в булевом представлении,
логический оператор И находит первое ложное значение*/

// let y = 1 && null;
// y = null; 
/* 1 это true в булевом представлении, 
null преобразуется в 0, а 0 это false в булевом представлении,
логический оператор И находит первое ложное значение*/


// let y = null || 0 || 1;
// y = 1; 
/* null преобразуется в 0, а 0 это false в булевом представлении,
далее 0 это false в булевом представлении,
логический оператор ИЛИ находит первое истинное значение, это 1 */

//let y = null && 0 && 1;
// y = null; 
/* null преобразуется в 0, а 0 это false в булевом представлении,
логический оператор И находит первое ложное значение,
остальные значения не рассматриваются */

console.log(y);



// Чему равен x в каждом из примеров, объясните почему:
let x = 1 + 2 + '3'; 
x = '33';
/* производится сложение значений типа number, 
затем конкатенация результата со строкой */

// let x = 1 + 2 - '1';
// x = 2;
/* производится сложение значений типа number, 
затем неявное преобразование string в number в результате вычитания */

// let x = '1' + 2 - 1;
// x = 11;
/* получаем '12' в результате конкатенации, 
затем неявное преобразование string '12' в number в результате вычитания */

// let x = true + 1;
// x = 2;
/* true преобразуется в number 1 в математическом выражении, 
затем производится сложение */

// let x = +'1' + 2;
// x = 3;
/* унарный + преобразует string  в number, 
затем производится сложение */

// let x = null + 2;
// x = 2;
/* null преобразуется в 0, 
затем производится сложение */


// let x = undefined + 2;
// x = NaN;
/* undefined преобразуется в NaN, 
математические операции с NaN возвращают NaN*/


// let x = true + undefined;
// x = NaN;
/* true преобразуется в number 1, но в данном примере it doesn't matter, т.к.
undefined преобразуется в NaN, математические операции с NaN возвращают NaN*/
console.log(x);
